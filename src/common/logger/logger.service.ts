import {
  ConsoleLogger,
  Injectable,
  LoggerService as IBaseLoggerService,
  Scope,
} from '@nestjs/common';
import {
  Context,
  GlobalContextSetter,
  LogWithContext,
} from '@/common/logger/logger.decorators';
import * as colors from 'colors';

@Injectable({ scope: Scope.TRANSIENT })
export class LoggerService extends ConsoleLogger implements IBaseLoggerService {
  /**
   * Write a 'log' level log.
   */
  @LogWithContext
  public override log(
    message: any,
    @Context context?: string,
    isSuccess?: boolean,
  ): void {
    console.info(
      isSuccess ? 'üü¢' : 'üîµ',
      colors[isSuccess ? 'bgGreen' : 'bgBlue'].black.italic(
        this.getWrappedMessage(message),
      ),
    );
  }

  /**
   * Write a 'warn' level log, if the configured level allows for it.
   */
  @LogWithContext
  public override warn(message: any, @Context context?: string): void {
    console.warn(
      'üü°',
      colors.bgYellow.black.italic(this.getWrappedMessage(message)),
    );
  }

  /**
   * Write an 'error' level log, if the configured level allows for it.
   */
  @LogWithContext
  public override error(
    message: any,
    stack?: string,
    @Context context?: string,
  ): void {
    console.error(
      'üî¥',
      colors.bgRed.black.italic(this.getWrappedMessage(message)),
    );
  }

  /**
   * Write a 'log' level log.
   */
  public success(message: any, context?: string): void {
    this.log(message, context, true);
  }

  @GlobalContextSetter
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  public set globalContext(context: string) {}

  // FIXME: –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≤ —Å–ª—É—á–∞–µ —Å —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º
  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ç—Ç–µ—Ä globalContext –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
   * */
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  public override setContext() {}

  private getWrappedMessage(message: any) {
    return ` -- ${message} -- `;
  }
}
